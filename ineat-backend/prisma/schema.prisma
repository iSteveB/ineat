generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique
  passwordHash String
  firstName    String
  lastName     String
  profileType  ProfileType
  preferences  Json // Stocke les préférences en JSON (restrictions alimentaires, allergies, etc.)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  subscription Subscription @default(FREE)

  inventory     InventoryItem[]
  budgets       Budget[]
  expenses      Expense[]
  notifications Notification[]
}

enum ProfileType {
  FAMILY
  STUDENT
  SINGLE
}

enum Subscription {
  FREE
  PREMIUM
  ADMIN
}

model Product {
  id          String      @id @default(uuid())
  barcode     String?     @unique
  name        String
  brand       String?
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  nutriscore  NutriScore?
  ecoscore    Ecoscore?
  novascore   Novascore?
  unitType    UnitType
  ingredients String?
  nutrients   Json? // Structure : { carbohydrates: number, proteins: number, fats: number, salt: number }
  imageUrl    String?
  externalId  String? // ID de référence dans OpenFoodFacts
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  inventoryItems    InventoryItem[]
  recipeIngredients RecipeIngredient[]

  @@index([name])
  @@index([brand])
}

enum NutriScore {
  A
  B
  C
  D
  E
}

enum Novascore {
  GROUP_1 // Nova group 1 - Aliments non transformés ou minimalement transformés
  GROUP_2 // Nova group 2 - Ingrédients culinaires transformés
  GROUP_3 // Nova group 3 - Aliments transformés  
  GROUP_4 // Nova group 4 - Aliments ultra-transformés
}

enum Ecoscore {
  A
  B
  C
  D
  E
}

enum UnitType {
  KG
  G
  L
  ML
  UNIT
}

model Category {
  id       String     @id @default(uuid())
  name     String
  slug     String     @unique
  parentId String?
  parent   Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToSubcategory")
  icon     String?

  products Product[]
}

model InventoryItem {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  product         Product   @relation(fields: [productId], references: [id])
  productId       String
  quantity        Float
  expiryDate      DateTime?
  purchaseDate    DateTime
  purchasePrice   Float?
  storageLocation String?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
  @@index([productId])
  @@index([expiryDate])
}

model Recipe {
  id              String           @id @default(uuid())
  name            String
  description     String?
  instructions    String
  preparationTime Int? // en minutes
  cookingTime     Int? // en minutes
  servings        Int
  difficulty      RecipeDifficulty
  imageUrl        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  ingredients RecipeIngredient[]
}

enum RecipeDifficulty {
  EASY
  MEDIUM
  HARD
}

model RecipeIngredient {
  id        String  @id @default(uuid())
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  recipeId  String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Float
  unit      String
  notes     String?

  @@index([recipeId])
  @@index([productId])
}

model Budget {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  amount      Float
  periodStart DateTime
  periodEnd   DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  expenses Expense[]

  @@index([userId])
  @@index([periodStart, periodEnd])
}

model Expense {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  budget    Budget   @relation(fields: [budgetId], references: [id])
  budgetId  String
  amount    Float
  date      DateTime
  source    String?
  category  String?
  receiptId String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([budgetId])
  @@index([date])
  @@index([category])
}

model Notification {
  id            String           @id @default(uuid())
  user          User             @relation(fields: [userId], references: [id])
  userId        String
  type          NotificationType
  title         String
  message       String
  isRead        Boolean          @default(false)
  referenceId   String?
  referenceType String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([userId])
  @@index([type])
  @@index([isRead])
}

enum NotificationType {
  EXPIRY
  BUDGET
  SYSTEM
}
